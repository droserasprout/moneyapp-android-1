package com.cactusteam.money.data.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.cactusteam.money.data.dao.AccountDao;
import com.cactusteam.money.data.dao.CategoryDao;
import com.cactusteam.money.data.dao.SubcategoryDao;
import com.cactusteam.money.data.dao.TransactionDao;
import com.cactusteam.money.data.dao.TagDao;
import com.cactusteam.money.data.dao.TransactionTagDao;
import com.cactusteam.money.data.dao.CurrencyRateDao;
import com.cactusteam.money.data.dao.BudgetPlanDao;
import com.cactusteam.money.data.dao.BudgetPlanDependencyDao;
import com.cactusteam.money.data.dao.DebtDao;
import com.cactusteam.money.data.dao.DebtNoteDao;
import com.cactusteam.money.data.dao.TransactionPatternDao;
import com.cactusteam.money.data.dao.PatternTagDao;
import com.cactusteam.money.data.dao.NoteDao;
import com.cactusteam.money.data.dao.SyncLogDao;
import com.cactusteam.money.data.dao.TrashDao;
import com.cactusteam.money.data.dao.SyncLockDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 14): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 14;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        AccountDao.createTable(db, ifNotExists);
        CategoryDao.createTable(db, ifNotExists);
        SubcategoryDao.createTable(db, ifNotExists);
        TransactionDao.createTable(db, ifNotExists);
        TagDao.createTable(db, ifNotExists);
        TransactionTagDao.createTable(db, ifNotExists);
        CurrencyRateDao.createTable(db, ifNotExists);
        BudgetPlanDao.createTable(db, ifNotExists);
        BudgetPlanDependencyDao.createTable(db, ifNotExists);
        DebtDao.createTable(db, ifNotExists);
        DebtNoteDao.createTable(db, ifNotExists);
        TransactionPatternDao.createTable(db, ifNotExists);
        PatternTagDao.createTable(db, ifNotExists);
        NoteDao.createTable(db, ifNotExists);
        SyncLogDao.createTable(db, ifNotExists);
        TrashDao.createTable(db, ifNotExists);
        SyncLockDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        AccountDao.dropTable(db, ifExists);
        CategoryDao.dropTable(db, ifExists);
        SubcategoryDao.dropTable(db, ifExists);
        TransactionDao.dropTable(db, ifExists);
        TagDao.dropTable(db, ifExists);
        TransactionTagDao.dropTable(db, ifExists);
        CurrencyRateDao.dropTable(db, ifExists);
        BudgetPlanDao.dropTable(db, ifExists);
        BudgetPlanDependencyDao.dropTable(db, ifExists);
        DebtDao.dropTable(db, ifExists);
        DebtNoteDao.dropTable(db, ifExists);
        TransactionPatternDao.dropTable(db, ifExists);
        PatternTagDao.dropTable(db, ifExists);
        NoteDao.dropTable(db, ifExists);
        SyncLogDao.dropTable(db, ifExists);
        TrashDao.dropTable(db, ifExists);
        SyncLockDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AccountDao.class);
        registerDaoClass(CategoryDao.class);
        registerDaoClass(SubcategoryDao.class);
        registerDaoClass(TransactionDao.class);
        registerDaoClass(TagDao.class);
        registerDaoClass(TransactionTagDao.class);
        registerDaoClass(CurrencyRateDao.class);
        registerDaoClass(BudgetPlanDao.class);
        registerDaoClass(BudgetPlanDependencyDao.class);
        registerDaoClass(DebtDao.class);
        registerDaoClass(DebtNoteDao.class);
        registerDaoClass(TransactionPatternDao.class);
        registerDaoClass(PatternTagDao.class);
        registerDaoClass(NoteDao.class);
        registerDaoClass(SyncLogDao.class);
        registerDaoClass(TrashDao.class);
        registerDaoClass(SyncLockDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
