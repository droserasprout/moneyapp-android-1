package com.cactusteam.money.data.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.cactusteam.money.data.dao.Debt;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEBT".
*/
public class DebtDao extends AbstractDao<Debt, Long> {

    public static final String TABLENAME = "DEBT";

    /**
     * Properties of entity Debt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property ContactId = new Property(3, Long.class, "contactId", false, "CONTACT_ID");
        public final static Property Till = new Property(4, java.util.Date.class, "till", false, "TILL");
        public final static Property Start = new Property(5, java.util.Date.class, "start", false, "START");
        public final static Property Finished = new Property(6, boolean.class, "finished", false, "FINISHED");
        public final static Property GlobalId = new Property(7, Long.class, "globalId", false, "GLOBAL_ID");
        public final static Property Synced = new Property(8, Boolean.class, "synced", false, "SYNCED");
        public final static Property AccountId = new Property(9, long.class, "accountId", false, "ACCOUNT_ID");
    };

    private DaoSession daoSession;


    public DebtDao(DaoConfig config) {
        super(config);
    }
    
    public DebtDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEBT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PHONE\" TEXT," + // 2: phone
                "\"CONTACT_ID\" INTEGER," + // 3: contactId
                "\"TILL\" INTEGER NOT NULL ," + // 4: till
                "\"START\" INTEGER," + // 5: start
                "\"FINISHED\" INTEGER NOT NULL ," + // 6: finished
                "\"GLOBAL_ID\" INTEGER," + // 7: globalId
                "\"SYNCED\" INTEGER," + // 8: synced
                "\"ACCOUNT_ID\" INTEGER NOT NULL );"); // 9: accountId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEBT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Debt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(4, contactId);
        }
        stmt.bindLong(5, entity.getTill().getTime());
 
        java.util.Date start = entity.getStart();
        if (start != null) {
            stmt.bindLong(6, start.getTime());
        }
        stmt.bindLong(7, entity.getFinished() ? 1L: 0L);
 
        Long globalId = entity.getGlobalId();
        if (globalId != null) {
            stmt.bindLong(8, globalId);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(9, synced ? 1L: 0L);
        }
        stmt.bindLong(10, entity.getAccountId());
    }

    @Override
    protected void attachEntity(Debt entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Debt readEntity(Cursor cursor, int offset) {
        Debt entity = new Debt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // contactId
            new java.util.Date(cursor.getLong(offset + 4)), // till
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // start
            cursor.getShort(offset + 6) != 0, // finished
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // globalId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // synced
            cursor.getLong(offset + 9) // accountId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Debt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTill(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStart(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFinished(cursor.getShort(offset + 6) != 0);
        entity.setGlobalId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSynced(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setAccountId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Debt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Debt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAccountDao().getAllColumns());
            builder.append(" FROM DEBT T");
            builder.append(" LEFT JOIN ACCOUNT T0 ON T.\"ACCOUNT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Debt loadCurrentDeep(Cursor cursor, boolean lock) {
        Debt entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Account account = loadCurrentOther(daoSession.getAccountDao(), cursor, offset);
         if(account != null) {
            entity.setAccount(account);
        }

        return entity;    
    }

    public Debt loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Debt> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Debt> list = new ArrayList<Debt>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Debt> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Debt> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
