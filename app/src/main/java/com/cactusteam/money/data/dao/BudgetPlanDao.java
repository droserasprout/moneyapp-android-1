package com.cactusteam.money.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cactusteam.money.data.dao.BudgetPlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUDGET_PLAN".
*/
public class BudgetPlanDao extends AbstractDao<BudgetPlan, Long> {

    public static final String TABLENAME = "BUDGET_PLAN";

    /**
     * Properties of entity BudgetPlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Start = new Property(2, java.util.Date.class, "start", false, "START");
        public final static Property Finish = new Property(3, java.util.Date.class, "finish", false, "FINISH");
        public final static Property Limit = new Property(4, double.class, "limit", false, "LIMIT");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Next = new Property(6, Long.class, "next", false, "NEXT");
        public final static Property GlobalId = new Property(7, Long.class, "globalId", false, "GLOBAL_ID");
        public final static Property Synced = new Property(8, Boolean.class, "synced", false, "SYNCED");
    };

    private DaoSession daoSession;


    public BudgetPlanDao(DaoConfig config) {
        super(config);
    }
    
    public BudgetPlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUDGET_PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"START\" INTEGER NOT NULL ," + // 2: start
                "\"FINISH\" INTEGER NOT NULL ," + // 3: finish
                "\"LIMIT\" REAL NOT NULL ," + // 4: limit
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"NEXT\" INTEGER," + // 6: next
                "\"GLOBAL_ID\" INTEGER," + // 7: globalId
                "\"SYNCED\" INTEGER);"); // 8: synced
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUDGET_PLAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BudgetPlan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getStart().getTime());
        stmt.bindLong(4, entity.getFinish().getTime());
        stmt.bindDouble(5, entity.getLimit());
        stmt.bindLong(6, entity.getType());
 
        Long next = entity.getNext();
        if (next != null) {
            stmt.bindLong(7, next);
        }
 
        Long globalId = entity.getGlobalId();
        if (globalId != null) {
            stmt.bindLong(8, globalId);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(9, synced ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(BudgetPlan entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BudgetPlan readEntity(Cursor cursor, int offset) {
        BudgetPlan entity = new BudgetPlan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            new java.util.Date(cursor.getLong(offset + 2)), // start
            new java.util.Date(cursor.getLong(offset + 3)), // finish
            cursor.getDouble(offset + 4), // limit
            cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // next
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // globalId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // synced
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BudgetPlan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setStart(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setFinish(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLimit(cursor.getDouble(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setNext(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGlobalId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setSynced(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BudgetPlan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BudgetPlan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
