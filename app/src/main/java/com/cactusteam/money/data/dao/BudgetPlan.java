package com.cactusteam.money.data.dao;

import java.util.List;
import com.cactusteam.money.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.support.v4.util.ArrayMap;

import java.util.Map;

import com.cactusteam.money.data.filter.CategoryTransactionFilter;
import com.cactusteam.money.data.filter.ITransactionFilter;
import com.cactusteam.money.data.filter.OrTransactionFilters;
import com.cactusteam.money.data.filter.SubcategoryTransactionFilter;
import com.cactusteam.money.data.filter.TagTransactionFilter;

import com.cactusteam.money.data.DataConstants;
// KEEP INCLUDES END
/**
 * Entity mapped to table "BUDGET_PLAN".
 */
public class BudgetPlan implements ISyncObject {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private java.util.Date start;
    /** Not-null value. */
    private java.util.Date finish;
    private double limit;
    private int type;
    private Long next;
    private Long globalId;
    private Boolean synced;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BudgetPlanDao myDao;

    private List<BudgetPlanDependency> dependencies;

    // KEEP FIELDS - put your custom fields here
    public static final int ONE_TIME_TYPE = 0;
    public static final int PERIODICAL_TYPE = 1;

    private boolean finished;
    private double expense;

    private final Map<BudgetPlanDependency, Object> dependencyObjects = new ArrayMap<>();
    // KEEP FIELDS END

    public BudgetPlan() {
    }

    public BudgetPlan(Long id) {
        this.id = id;
    }

    public BudgetPlan(Long id, String name, java.util.Date start, java.util.Date finish, double limit, int type, Long next, Long globalId, Boolean synced) {
        this.id = id;
        this.name = name;
        this.start = start;
        this.finish = finish;
        this.limit = limit;
        this.type = type;
        this.next = next;
        this.globalId = globalId;
        this.synced = synced;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBudgetPlanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public java.util.Date getStart() {
        return start;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStart(java.util.Date start) {
        this.start = start;
    }

    /** Not-null value. */
    public java.util.Date getFinish() {
        return finish;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFinish(java.util.Date finish) {
        this.finish = finish;
    }

    public double getLimit() {
        return limit;
    }

    public void setLimit(double limit) {
        this.limit = limit;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public Long getNext() {
        return next;
    }

    public void setNext(Long next) {
        this.next = next;
    }

    public Long getGlobalId() {
        return globalId;
    }

    public void setGlobalId(Long globalId) {
        this.globalId = globalId;
    }

    public Boolean getSynced() {
        return synced;
    }

    public void setSynced(Boolean synced) {
        this.synced = synced;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<BudgetPlanDependency> getDependencies() {
        if (dependencies == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BudgetPlanDependencyDao targetDao = daoSession.getBudgetPlanDependencyDao();
            List<BudgetPlanDependency> dependenciesNew = targetDao._queryBudgetPlan_Dependencies(id);
            synchronized (this) {
                if(dependencies == null) {
                    dependencies = dependenciesNew;
                }
            }
        }
        return dependencies;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDependencies() {
        dependencies = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public boolean isFinished() {
        return finished;
    }

    public void setFinished(boolean finished) {
        this.finished = finished;
    }

    public double getExpense() {
        return expense;
    }

    public void setExpense(double expense) {
        this.expense = expense;
    }

    public Map<BudgetPlanDependency, Object> getDependencyObjects() {
        return dependencyObjects;
    }

    public ITransactionFilter createFilter() {
        OrTransactionFilters filter = new OrTransactionFilters();
        for (BudgetPlanDependency dependency : getDependencies()) {
            if (dependency.getRefType() == DataConstants.CATEGORY_TYPE) {
                filter.addFilter(new CategoryTransactionFilter(Long.valueOf(dependency.getRefId())));
            } else if (dependency.getRefType() == DataConstants.SUBCATEGORY_TYPE) {
                filter.addFilter(new SubcategoryTransactionFilter(Long.valueOf(dependency.getRefId())));
            } else if (dependency.getRefType() == DataConstants.TAG_TYPE) {
                filter.addFilter(new TagTransactionFilter(Long.valueOf(dependency.getRefId())));
            }
        }
        return filter;
    }
    // KEEP METHODS END

}
