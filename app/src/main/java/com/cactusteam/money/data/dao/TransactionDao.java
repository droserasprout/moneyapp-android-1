package com.cactusteam.money.data.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.cactusteam.money.data.dao.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OPERATION".
*/
public class TransactionDao extends AbstractDao<Transaction, Long> {

    public static final String TABLENAME = "OPERATION";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
        public final static Property Ref = new Property(4, String.class, "ref", false, "REF");
        public final static Property GlobalId = new Property(5, Long.class, "globalId", false, "GLOBAL_ID");
        public final static Property Synced = new Property(6, Boolean.class, "synced", false, "SYNCED");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property SourceAccountId = new Property(8, long.class, "sourceAccountId", false, "SOURCE_ACCOUNT_ID");
        public final static Property Amount = new Property(9, double.class, "amount", false, "AMOUNT");
        public final static Property CategoryId = new Property(10, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property SubcategoryId = new Property(11, Long.class, "subcategoryId", false, "SUBCATEGORY_ID");
        public final static Property DestAccountId = new Property(12, Long.class, "destAccountId", false, "DEST_ACCOUNT_ID");
        public final static Property DestAmount = new Property(13, Double.class, "destAmount", false, "DEST_AMOUNT");
    };

    private DaoSession daoSession;


    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OPERATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"DATE\" INTEGER NOT NULL ," + // 2: date
                "\"COMMENT\" TEXT," + // 3: comment
                "\"REF\" TEXT," + // 4: ref
                "\"GLOBAL_ID\" INTEGER," + // 5: globalId
                "\"SYNCED\" INTEGER," + // 6: synced
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"SOURCE_ACCOUNT_ID\" INTEGER NOT NULL ," + // 8: sourceAccountId
                "\"AMOUNT\" REAL NOT NULL ," + // 9: amount
                "\"CATEGORY_ID\" INTEGER," + // 10: categoryId
                "\"SUBCATEGORY_ID\" INTEGER," + // 11: subcategoryId
                "\"DEST_ACCOUNT_ID\" INTEGER," + // 12: destAccountId
                "\"DEST_AMOUNT\" REAL);"); // 13: destAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OPERATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getDate().getTime());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        String ref = entity.getRef();
        if (ref != null) {
            stmt.bindString(5, ref);
        }
 
        Long globalId = entity.getGlobalId();
        if (globalId != null) {
            stmt.bindLong(6, globalId);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(7, synced ? 1L: 0L);
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindLong(9, entity.getSourceAccountId());
        stmt.bindDouble(10, entity.getAmount());
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(11, categoryId);
        }
 
        Long subcategoryId = entity.getSubcategoryId();
        if (subcategoryId != null) {
            stmt.bindLong(12, subcategoryId);
        }
 
        Long destAccountId = entity.getDestAccountId();
        if (destAccountId != null) {
            stmt.bindLong(13, destAccountId);
        }
 
        Double destAmount = entity.getDestAmount();
        if (destAmount != null) {
            stmt.bindDouble(14, destAmount);
        }
    }

    @Override
    protected void attachEntity(Transaction entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comment
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ref
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // globalId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // synced
            cursor.getInt(offset + 7), // status
            cursor.getLong(offset + 8), // sourceAccountId
            cursor.getDouble(offset + 9), // amount
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // categoryId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // subcategoryId
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // destAccountId
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13) // destAmount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRef(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGlobalId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSynced(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setSourceAccountId(cursor.getLong(offset + 8));
        entity.setAmount(cursor.getDouble(offset + 9));
        entity.setCategoryId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setSubcategoryId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setDestAccountId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDestAmount(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAccountDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getSubcategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getAccountDao().getAllColumns());
            builder.append(" FROM OPERATION T");
            builder.append(" LEFT JOIN ACCOUNT T0 ON T.\"SOURCE_ACCOUNT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN CATEGORY T1 ON T.\"CATEGORY_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN SUBCATEGORY T2 ON T.\"SUBCATEGORY_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN ACCOUNT T3 ON T.\"DEST_ACCOUNT_ID\"=T3.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Transaction loadCurrentDeep(Cursor cursor, boolean lock) {
        Transaction entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Account sourceAccount = loadCurrentOther(daoSession.getAccountDao(), cursor, offset);
         if(sourceAccount != null) {
            entity.setSourceAccount(sourceAccount);
        }
        offset += daoSession.getAccountDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        Subcategory subcategory = loadCurrentOther(daoSession.getSubcategoryDao(), cursor, offset);
        entity.setSubcategory(subcategory);
        offset += daoSession.getSubcategoryDao().getAllColumns().length;

        Account destAccount = loadCurrentOther(daoSession.getAccountDao(), cursor, offset);
        entity.setDestAccount(destAccount);

        return entity;    
    }

    public Transaction loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Transaction> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Transaction> list = new ArrayList<Transaction>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Transaction> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Transaction> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
