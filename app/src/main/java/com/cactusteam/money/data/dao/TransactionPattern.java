package com.cactusteam.money.data.dao;

import java.util.List;
import com.cactusteam.money.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TRANSACTION_PATTERN".
 */
public class TransactionPattern implements ISyncObject {

    private Long id;
    private String name;
    private int type;
    private String comment;
    private Long globalId;
    private Boolean synced;
    private long sourceAccountId;
    private double amount;
    private Long categoryId;
    private Long subcategoryId;
    private Long destAccountId;
    private Double destAmount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TransactionPatternDao myDao;

    private Account sourceAccount;
    private Long sourceAccount__resolvedKey;

    private Category category;
    private Long category__resolvedKey;

    private Subcategory subcategory;
    private Long subcategory__resolvedKey;

    private Account destAccount;
    private Long destAccount__resolvedKey;

    private List<PatternTag> tags;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TransactionPattern() {
    }

    public TransactionPattern(Long id) {
        this.id = id;
    }

    public TransactionPattern(Long id, String name, int type, String comment, Long globalId, Boolean synced, long sourceAccountId, double amount, Long categoryId, Long subcategoryId, Long destAccountId, Double destAmount) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.comment = comment;
        this.globalId = globalId;
        this.synced = synced;
        this.sourceAccountId = sourceAccountId;
        this.amount = amount;
        this.categoryId = categoryId;
        this.subcategoryId = subcategoryId;
        this.destAccountId = destAccountId;
        this.destAmount = destAmount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTransactionPatternDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Long getGlobalId() {
        return globalId;
    }

    public void setGlobalId(Long globalId) {
        this.globalId = globalId;
    }

    public Boolean getSynced() {
        return synced;
    }

    public void setSynced(Boolean synced) {
        this.synced = synced;
    }

    public long getSourceAccountId() {
        return sourceAccountId;
    }

    public void setSourceAccountId(long sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getSubcategoryId() {
        return subcategoryId;
    }

    public void setSubcategoryId(Long subcategoryId) {
        this.subcategoryId = subcategoryId;
    }

    public Long getDestAccountId() {
        return destAccountId;
    }

    public void setDestAccountId(Long destAccountId) {
        this.destAccountId = destAccountId;
    }

    public Double getDestAmount() {
        return destAmount;
    }

    public void setDestAmount(Double destAmount) {
        this.destAmount = destAmount;
    }

    /** To-one relationship, resolved on first access. */
    public Account getSourceAccount() {
        long __key = this.sourceAccountId;
        if (sourceAccount__resolvedKey == null || !sourceAccount__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountDao targetDao = daoSession.getAccountDao();
            Account sourceAccountNew = targetDao.load(__key);
            synchronized (this) {
                sourceAccount = sourceAccountNew;
            	sourceAccount__resolvedKey = __key;
            }
        }
        return sourceAccount;
    }

    public void setSourceAccount(Account sourceAccount) {
        if (sourceAccount == null) {
            throw new DaoException("To-one property 'sourceAccountId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.sourceAccount = sourceAccount;
            sourceAccountId = sourceAccount.getId();
            sourceAccount__resolvedKey = sourceAccountId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Subcategory getSubcategory() {
        Long __key = this.subcategoryId;
        if (subcategory__resolvedKey == null || !subcategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubcategoryDao targetDao = daoSession.getSubcategoryDao();
            Subcategory subcategoryNew = targetDao.load(__key);
            synchronized (this) {
                subcategory = subcategoryNew;
            	subcategory__resolvedKey = __key;
            }
        }
        return subcategory;
    }

    public void setSubcategory(Subcategory subcategory) {
        synchronized (this) {
            this.subcategory = subcategory;
            subcategoryId = subcategory == null ? null : subcategory.getId();
            subcategory__resolvedKey = subcategoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Account getDestAccount() {
        Long __key = this.destAccountId;
        if (destAccount__resolvedKey == null || !destAccount__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountDao targetDao = daoSession.getAccountDao();
            Account destAccountNew = targetDao.load(__key);
            synchronized (this) {
                destAccount = destAccountNew;
            	destAccount__resolvedKey = __key;
            }
        }
        return destAccount;
    }

    public void setDestAccount(Account destAccount) {
        synchronized (this) {
            this.destAccount = destAccount;
            destAccountId = destAccount == null ? null : destAccount.getId();
            destAccount__resolvedKey = destAccountId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PatternTag> getTags() {
        if (tags == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PatternTagDao targetDao = daoSession.getPatternTagDao();
            List<PatternTag> tagsNew = targetDao._queryTransactionPattern_Tags(id);
            synchronized (this) {
                if(tags == null) {
                    tags = tagsNew;
                }
            }
        }
        return tags;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTags() {
        tags = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
