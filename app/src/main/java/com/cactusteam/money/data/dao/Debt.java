package com.cactusteam.money.data.dao;

import java.util.List;
import com.cactusteam.money.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DEBT".
 */
public class Debt implements ISyncObject {

    private Long id;
    /** Not-null value. */
    private String name;
    private String phone;
    private Long contactId;
    /** Not-null value. */
    private java.util.Date till;
    private java.util.Date start;
    private boolean finished;
    private Long globalId;
    private Boolean synced;
    private long accountId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DebtDao myDao;

    private Account account;
    private Long account__resolvedKey;

    private List<DebtNote> notes;

    // KEEP FIELDS - put your custom fields here
    public static final String DEBT_REF_START = "debt_";
    public static final String DEBT_REF_PATTERN = DEBT_REF_START + "%d";

    private String currencyCode;
    private double amount;
    private boolean urgent;
    // KEEP FIELDS END

    public Debt() {
    }

    public Debt(Long id) {
        this.id = id;
    }

    public Debt(Long id, String name, String phone, Long contactId, java.util.Date till, java.util.Date start, boolean finished, Long globalId, Boolean synced, long accountId) {
        this.id = id;
        this.name = name;
        this.phone = phone;
        this.contactId = contactId;
        this.till = till;
        this.start = start;
        this.finished = finished;
        this.globalId = globalId;
        this.synced = synced;
        this.accountId = accountId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDebtDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    /** Not-null value. */
    public java.util.Date getTill() {
        return till;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTill(java.util.Date till) {
        this.till = till;
    }

    public java.util.Date getStart() {
        return start;
    }

    public void setStart(java.util.Date start) {
        this.start = start;
    }

    public boolean getFinished() {
        return finished;
    }

    public void setFinished(boolean finished) {
        this.finished = finished;
    }

    public Long getGlobalId() {
        return globalId;
    }

    public void setGlobalId(Long globalId) {
        this.globalId = globalId;
    }

    public Boolean getSynced() {
        return synced;
    }

    public void setSynced(Boolean synced) {
        this.synced = synced;
    }

    public long getAccountId() {
        return accountId;
    }

    public void setAccountId(long accountId) {
        this.accountId = accountId;
    }

    /** To-one relationship, resolved on first access. */
    public Account getAccount() {
        long __key = this.accountId;
        if (account__resolvedKey == null || !account__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountDao targetDao = daoSession.getAccountDao();
            Account accountNew = targetDao.load(__key);
            synchronized (this) {
                account = accountNew;
            	account__resolvedKey = __key;
            }
        }
        return account;
    }

    public void setAccount(Account account) {
        if (account == null) {
            throw new DaoException("To-one property 'accountId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.account = account;
            accountId = account.getId();
            account__resolvedKey = accountId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DebtNote> getNotes() {
        if (notes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DebtNoteDao targetDao = daoSession.getDebtNoteDao();
            List<DebtNote> notesNew = targetDao._queryDebt_Notes(id);
            synchronized (this) {
                if(notes == null) {
                    notes = notesNew;
                }
            }
        }
        return notes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNotes() {
        notes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public boolean isUrgent() {
        return urgent;
    }

    public void setUrgent(boolean urgent) {
        this.urgent = urgent;
    }
    // KEEP METHODS END

}
