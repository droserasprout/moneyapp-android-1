package com.cactusteam.money.data.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.cactusteam.money.data.dao.DebtNote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEBT_NOTE".
*/
public class DebtNoteDao extends AbstractDao<DebtNote, Long> {

    public static final String TABLENAME = "DEBT_NOTE";

    /**
     * Properties of entity DebtNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DebtId = new Property(1, long.class, "debtId", false, "DEBT_ID");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property GlobalId = new Property(4, Long.class, "globalId", false, "GLOBAL_ID");
        public final static Property Synced = new Property(5, Boolean.class, "synced", false, "SYNCED");
    };

    private Query<DebtNote> debt_NotesQuery;

    public DebtNoteDao(DaoConfig config) {
        super(config);
    }
    
    public DebtNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEBT_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEBT_ID\" INTEGER NOT NULL ," + // 1: debtId
                "\"DATE\" INTEGER NOT NULL ," + // 2: date
                "\"TEXT\" TEXT," + // 3: text
                "\"GLOBAL_ID\" INTEGER," + // 4: globalId
                "\"SYNCED\" INTEGER);"); // 5: synced
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEBT_NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DebtNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDebtId());
        stmt.bindLong(3, entity.getDate().getTime());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        Long globalId = entity.getGlobalId();
        if (globalId != null) {
            stmt.bindLong(5, globalId);
        }
 
        Boolean synced = entity.getSynced();
        if (synced != null) {
            stmt.bindLong(6, synced ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DebtNote readEntity(Cursor cursor, int offset) {
        DebtNote entity = new DebtNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // debtId
            new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // globalId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // synced
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DebtNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDebtId(cursor.getLong(offset + 1));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGlobalId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSynced(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DebtNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DebtNote entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "notes" to-many relationship of Debt. */
    public List<DebtNote> _queryDebt_Notes(long debtId) {
        synchronized (this) {
            if (debt_NotesQuery == null) {
                QueryBuilder<DebtNote> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DebtId.eq(null));
                debt_NotesQuery = queryBuilder.build();
            }
        }
        Query<DebtNote> query = debt_NotesQuery.forCurrentThread();
        query.setParameter(0, debtId);
        return query.list();
    }

}
