package com.cactusteam.money.data.dao;

import java.util.List;
import com.cactusteam.money.data.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "CATEGORY".
 */
public class Category implements ISyncObject {

    private Long id;
    private int type;
    /** Not-null value. */
    private String name;
    private String icon;
    private boolean deleted;
    private int customOrder;
    private Long globalId;
    private Boolean synced;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private List<Subcategory> subcategories;

    // KEEP FIELDS - put your custom fields here
    public static final int EXPENSE = 0;
    public static final int INCOME = 1;

    public static final int NAME_SORT = 0;
    public static final int FREQUENCY_SORT = 1;
    public static final int CUSTOM_SORT = 2;
    // KEEP FIELDS END

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, int type, String name, String icon, boolean deleted, int customOrder, Long globalId, Boolean synced) {
        this.id = id;
        this.type = type;
        this.name = name;
        this.icon = icon;
        this.deleted = deleted;
        this.customOrder = customOrder;
        this.globalId = globalId;
        this.synced = synced;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getIcon() {
        return icon;
    }

    public void setIcon(String icon) {
        this.icon = icon;
    }

    public boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public int getCustomOrder() {
        return customOrder;
    }

    public void setCustomOrder(int customOrder) {
        this.customOrder = customOrder;
    }

    public Long getGlobalId() {
        return globalId;
    }

    public void setGlobalId(Long globalId) {
        this.globalId = globalId;
    }

    public Boolean getSynced() {
        return synced;
    }

    public void setSynced(Boolean synced) {
        this.synced = synced;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Subcategory> getSubcategories() {
        if (subcategories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubcategoryDao targetDao = daoSession.getSubcategoryDao();
            List<Subcategory> subcategoriesNew = targetDao._queryCategory_Subcategories(id);
            synchronized (this) {
                if(subcategories == null) {
                    subcategories = subcategoriesNew;
                }
            }
        }
        return subcategories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSubcategories() {
        subcategories = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
